{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Req Documentation",
    "description": "REST API documentation for Req Project"
  },
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "myCookie": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "name": "Betting APIs",
      "description": "Stored in routes/bets.js"
    },
    {
      "name": "Location Betting APIs",
      "description": "Stored in routes/bets.js"
    },
    {
      "name": "User APIs",
      "description": "Stored in routes/users.js"
    },
    {
      "name": "Payment APIs",
      "description": "Stored in payments.js"
    },
    {
      "name": "Analytics APIs",
      "description": "routes/analytics.js"
    },
    {
      "name": "Index APIs",
      "description": "Stored in routes/index.js"
    },
    {
      "name": "Testing and Debugging APIs"
    }
  ],
  "host": "localhost:9000",
  "basePath": "/",
  "paths": {
    "/makeBet": {
      "post": {
        "summary": "Create new bet and adds it to the database",
        "tags": [
          "Betting APIs"
        ],
        "description": "Takes bet parameters and creates new bet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "type": {
                  "type": "string"
                },
                "side": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                },
                "deadline": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "firstPlaceCut": {
                  "type": "number"
                },
                "secondPlaceCut": {
                  "type": "number"
                },
                "thirdPlaceCut": {
                  "type": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created and saved new bet",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Bet not created due to error",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/decideBet": {
      "post": {
        "summary": "Closes Bet",
        "tags": [
          "Betting APIs"
        ],
        "description": "Finishes bet and pays out winnings",
        "security": [
          {
            "myCookie": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "betID": {
                  "type": "string"
                },
                "result": {
                  "type": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Finished bet and payed out winnings",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Bet not finished or winnings not payed out",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/betOn": {
      "post": {
        "summary": "Allows user to place bet",
        "tags": [
          "Betting APIs"
        ],
        "description": "Places user's bet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "betID": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "betAmount": {
                  "type": "number"
                },
                "type": {
                  "type": "string"
                },
                "side": {
                  "type": "string"
                },
                "bet": {
                  "type": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bet placed",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Bet not placed",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/bigButtonBet": {
      "post": {
        "summary": "Creates or closes bigRedButton bet",
        "tags": [
          "Betting APIs"
        ],
        "description": "Provides functionality for starting or closing a bigRedButton bet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "betID": {
                  "type": "string"
                },
                "result": {
                  "type": "string"
                },
                "action": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created bet or finished bet. If bet created betID is included in response.",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                },
                "betID": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bet not started or closed due to error",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/pressBigButton": {
      "post": {
        "summary": "Allows user to press big red button",
        "tags": [
          "Betting APIs"
        ],
        "description": "Acknowledges big red button press from user",
        "responses": {
          "200": {
            "description": "Pressed button",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Error pressing button",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/betExpired": {
      "post": {
        "summary": "Pays back bettors",
        "tags": [
          "Betting APIs"
        ],
        "description": "If bet expires the creator is punished and bettors are paid back.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "betID": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Penalised creator and paid back to bettors.",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Could not pay back bettors or error occured",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "401": {
            "description": "User not authorized to do this",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/getAllBetsDev": {
      "get": {
        "summary": "Retrieves bets from database",
        "tags": [
          "Betting APIs"
        ],
        "description": "Fetches all bets from database",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "secret": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sends all bets to user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/testBetSchema"
              }
            }
          },
          "401": {
            "description": "Not authorized or error occured",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/getTestBets": {
      "get": {
        "summary": "Returns bets from database",
        "tags": [
          "Betting APIs"
        ],
        "description": "Send bets from database with anonymous betting user details.",
        "responses": {
          "200": {
            "description": "Bet with anonymous user data.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/testBetSchema"
              }
            }
          },
          "400": {
            "description": "Could not return bets due to error.",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/addBetToDataBase": {
      "post": {
        "summary": "Takes bet object and stores it in database",
        "tags": [
          "Location Betting APIs"
        ],
        "description": "Stores bet object in bet collection",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/betSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saved bet object with added mongoose _id field",
            "schema": {
              "$ref": "#/definitions/betSchema"
            }
          }
        }
      }
    },
    "/addBettingRegion": {
      "post": {
        "summary": "Adds betting region to database",
        "tags": [
          "Location Betting APIs"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/bettingRegionSchema"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Saved region with added _id",
            "schema": {
              "$ref": "#/definitions/bettingRegionSchema"
            }
          }
        }
      }
    },
    "/getBetsInRegion": {
      "get": {
        "summary": "Returns available bets in region",
        "tags": [
          "Location Betting APIs"
        ],
        "description": "Finds bets created in a region using the region ID.",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "type": "string",
            "description": "ID of parent region",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of bet objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/betSchema"
              }
            }
          },
          "500": {
            "description": "Error find bet objects",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/getBettingRegions": {
      "get": {
        "summary": "Gets bettings regions available to user",
        "tags": [
          "Location Betting APIs"
        ],
        "description": "Calculates distance between user and centre of bet region using Haversine formula. If calculated distance is less than or equal to the bet region radius it is added to an array of response bet regions.",
        "parameters": [
          {
            "in": "query",
            "name": "lat",
            "type": "number",
            "required": true,
            "description": "Latitude of user"
          },
          {
            "in": "query",
            "name": "lng",
            "type": "number",
            "required": true,
            "description": "Longitude of user"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of bet region objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bettingRegionSchema"
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "500": {
            "description": "Error retrieving bet regions from database.",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/getRegionByID": {
      "get": {
        "summary": "Gets specific region",
        "tags": [
          "Location Betting APIs"
        ],
        "description": "Finds and returns bet region using id",
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Specified bet region",
            "schema": {
              "$ref": "#/definitions/bettingRegionSchema"
            }
          }
        }
      }
    },
    "/addBetToRegion": {
      "put": {
        "summary": "Adds bet to region",
        "tags": [
          "Location Betting APIs"
        ],
        "description": "Adds bet id to the array of child bet ids in the bet region specified. Also increments the number of bets field in region.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "IDs of region and bet",
            "schema": {
              "type": "object",
              "properties": {
                "regionID": {
                  "type": "string"
                },
                "betID": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated bet region",
            "schema": {
              "$ref": "#/definitions/bettingRegionSchema"
            }
          }
        }
      }
    },
    "/checkout": {
      "post": {
        "tags": [
          "Payment APIs"
        ],
        "summary": "Allows user to make new payment.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "product": {
                  "type": "string"
                },
                "token": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment validated",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Payment not valid",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/getBettingHistory": {
      "post": {
        "tags": [
          "Analytics APIs"
        ],
        "summary": "Gets betting history for a user",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Betting history was returned successfully",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Error retrieving betting history",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/getCreatedBettingHistory": {
      "post": {
        "tags": [
          "Analytics APIs"
        ],
        "summary": "Gets created bet history for a user",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created betting history was returned successfully",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Error retrieving created betting history",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/getWinLoss": {
      "post": {
        "tags": [
          "Analytics APIs"
        ],
        "summary": "Get the win loss ratio for a given user",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Win loss ratio successfully returned",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Error retrieving win loss ratio",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/getPeopleReached": {
      "post": {
        "tags": [
          "Analytics APIs"
        ],
        "summary": "Gets the number of bets made and users reached through them",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Number of bets made and users reached successfully returned",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Error retrieving bets made and users reached",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/addMultBets": {
      "post": {
        "summary": "Adds multiple bets to database",
        "tags": [
          "Testing and Debugging APIs"
        ],
        "description": "Takes array of bets and stores them in database. Used to auto-generate bets.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Array of bet objects",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/betSchema"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stored bets",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/betSchema"
              }
            }
          }
        }
      }
    },
    "/addMultRegions": {
      "post": {
        "summary": "Adds multiple bet regions to database",
        "tags": [
          "Testing and Debugging APIs"
        ],
        "description": "Takes an array of bet regions and adds them to database. Used to auto-generate betting regions.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Array of betting regions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bettingRegionSchema"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stored regions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bettingRegionSchema"
              }
            }
          }
        }
      }
    },
    "/addMultBetsToRegion": {
      "put": {
        "summary": "Adds multiple bets to bet region",
        "tags": [
          "Testing and Debugging APIs"
        ],
        "description": "Adds ids of multiple bets to bet ids array in specific bet region. Incremements counter of number of bets by the number of bets added.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "Array of bet IDs and ID of bet region",
            "schema": {
              "type": "object",
              "properties": {
                "regionID": {
                  "type": "string"
                },
                "bets": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated bet region",
            "schema": {
              "$ref": "#/definitions/bettingRegionSchema"
            }
          }
        }
      }
    },
    "/users/register": {
      "post": {
        "summary": "Allows users to create an account",
        "tags": [
          "User APIs"
        ],
        "description": "Registers a new unverified account",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "description": "User credentials",
            "schema": {
              "type": "object",
              "properties": {
                "user_name": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account was successfully added to unverified user table.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "User account could not be created.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "User logins",
        "tags": [
          "User APIs"
        ],
        "description": "Allows user login if Username and password are valid.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user_name": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "User could not be logged in due to invalid input",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/users/verifyAccount": {
      "post": {
        "summary": "Verifies email address of a user",
        "tags": [
          "User APIs"
        ],
        "description": "Allows user to enter verification code that is emailed to them. If the code exists for a user, the user's account is fully activated and added to the database.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "activationCode": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account successfully activated",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Account not successfully activated. Invalid verification code used",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/forgotPassword": {
      "post": {
        "summary": "Resets password of an account",
        "tags": [
          "User APIs"
        ],
        "description": "On success, sends email to user with link to reset their password. It queries the forgotten password table first to see if an email has already been sent with a reset password link. If so it reminds the user to check their inbox, else it sends an email with unique link to reset the user's password",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user_name": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email link successfully sent to user.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Most likely due to a reset link already been emailed to the user.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/resetPassword": {
      "post": {
        "summary": "Handles password reset from user",
        "tags": [
          "User APIs"
        ],
        "description": "Allows user to change password from link sent to their email. The user will submit their new password from a unique URL which will be used to map this new password to their account.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newPassword": {
                  "type": "string"
                },
                "fromURL": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password successfully changed",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input given to the router.",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/getProfilePicture": {
      "post": {
        "summary": "Gets profile picture for user if exists",
        "tags": [
          "User APIs"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "username": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns profile picture in body if exists. Otherwise none exists or could not be found.",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Invalid parameters",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "summary": "Get user profile",
        "tags": [
          "User APIs"
        ],
        "security": [
          {
            "myCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "User name"
          },
          "400": {
            "description": "Could not get user"
          }
        }
      }
    },
    "/users/uploadImage": {
      "get": {
        "summary": "Upload a profiler",
        "tags": [
          "User APIs"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "user_name": {
                  "type": "string"
                },
                "file": {
                  "type": "encoded image"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profiler successfully uploaded for the given user"
          },
          "400": {
            "description": "Error in the process of uploading the profiler."
          },
          "401": {
            "description": "An nsfw profiler was uploaded and rejected."
          }
        }
      }
    },
    "/buyCoins": {
      "post": {
        "summary": "Allows user to purchase new coins",
        "tags": [
          "Index APIs"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "total": {
                  "type": "number"
                },
                "stripeTokenId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Charged successfully."
          },
          "500": {
            "description": "Payment failed"
          }
        }
      }
    },
    "/createArticleBet": {
      "post": {
        "summary": "Create new article bet",
        "tags": [
          "Index APIs"
        ],
        "description": "Allows user to create new article bet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "betType": {
                  "type": "string"
                },
                "sitename": {
                  "type": "string"
                },
                "directory": {
                  "type": "string"
                },
                "month": {
                  "type": "string"
                },
                "year": {
                  "type": "string"
                },
                "searchTerm": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bet created",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "schema": {
              "properties": {
                "status": {
                  "type": "string"
                },
                "body": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Invalid data",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/shortenLink": {
      "post": {
        "summary": "Used to shorten QR code url link",
        "tags": [
          "Index APIs"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sends back shortened URL in body of response.",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          },
          "400": {
            "description": "Link could not be shortened.",
            "schema": {
              "$ref": "#/definitions/rest_API_Response"
            }
          }
        }
      }
    },
    "/getUsers": {
      "get": {
        "summary": "Returns user names of all users",
        "tags": [
          "Index APIs"
        ],
        "description": "Gets all users from database and returns their usernames",
        "responses": {
          "200": {
            "description": "Array of user names"
          }
        }
      }
    },
    "/getUsers/:id": {
      "get": {
        "summary": "Gets user by id and returns id and username",
        "tags": [
          "Index APIs"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "properties": {
                "id": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User name and ID"
          },
          "400": {
            "description": "Error"
          }
        }
      }
    },
    "/members": {
      "get": {
        "summary": "Renders specific page depending if user is logged in.",
        "tags": [
          "Index APIs"
        ],
        "security": [
          {
            "myCookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Renders home page if user logged in or forgot password page if not."
          }
        }
      }
    },
    "/getArticleBets": {
      "get": {
        "summary": "Returns all article bets.",
        "tags": [
          "Index APIs"
        ],
        "responses": {
          "200": {
            "description": "Array of article bets sorted by date created."
          },
          "400": {
            "description": "Error"
          }
        }
      }
    },
    "/getTime": {
      "get": {
        "summary": "Gets current time from server",
        "tags": [
          "Index APIs"
        ],
        "responses": {
          "200": {
            "description": "Current time object",
            "schema": {
              "type": "object",
              "properties": {
                "currentTime": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "betSchema": {
      "description": "Mongoose schema for storing bet data",
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "example": "Random bet"
        },
        "location_Name": {
          "type": "string",
          "example": "NUIG"
        },
        "latitude": {
          "type": "number",
          "example": 53.33784
        },
        "longitude": {
          "type": "number",
          "example": -9.180165
        },
        "radius": {
          "type": "number",
          "example": "200(m)"
        },
        "bet_region_id": {
          "type": "string",
          "description": "Used to store object ID of parent Betting Region",
          "example": "5e2f72253c750c169c7c816c"
        }
      }
    },
    "bettingRegionSchema": {
      "description": "Schema used for storing data on betting regions",
      "properties": {
        "region_name": {
          "type": "string",
          "example": "NUIG"
        },
        "latitude": {
          "type": "number",
          "example": 53.33784
        },
        "longitude": {
          "type": "number",
          "example": -9.180165
        },
        "radius": {
          "type": "number",
          "example": 200
        },
        "num_bets": {
          "type": "number",
          "example": 50,
          "description": "Stores number of bets in region"
        },
        "bet_ids": {
          "type": "array",
          "example": [],
          "description": "Array of child bet IDs",
          "items": {
            "type": "object",
            "description": "Mongoose object ID"
          }
        }
      }
    },
    "commentsSchema": {
      "properties": {
        "user_name": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        },
        "date_created": {
          "type": "object"
        },
        "up_votes": {
          "type": "number",
          "default": 0
        },
        "down_votes": {
          "type": "number",
          "default": 0
        }
      }
    },
    "forgotPasswordUsersSchema": {
      "required": [
        "user_name",
        "email",
        "resetCode",
        "resetUrl"
      ],
      "properties": {
        "user_name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        },
        "email": {
          "type": "string",
          "minLength": 5,
          "maxLength": 64
        },
        "resetCode": {
          "type": "string",
          "minLength": 10
        },
        "resetUrl": {
          "type": "string",
          "minLength": 10
        }
      }
    },
    "unverifiedUsersSchema": {
      "required": [
        "user_name",
        "email",
        "activationCode"
      ],
      "properties": {
        "user_name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        },
        "email": {
          "type": "string",
          "minLength": 5,
          "maxLength": 64
        },
        "password": {
          "type": "string",
          "minLength": 8
        },
        "activationCode": {
          "type": "string",
          "minLength": 6
        }
      }
    },
    "usersSchema": {
      "required": [
        "user_name"
      ],
      "properties": {
        "user_name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        },
        "email": {
          "type": "string",
          "minLength": 5,
          "maxLength": 64
        },
        "password": {
          "type": "string",
          "minLength": 8
        },
        "googleID": {
          "type": "string",
          "default": null
        },
        "githubID": {
          "type": "string",
          "default": null
        },
        "steamID": {
          "type": "string",
          "default": null
        },
        "profilePicture": {
          "type": "string"
        },
        "coins": {
          "type": "number",
          "default": 0
        },
        "accessToken": {
          "description": "JSON web token for sign-in",
          "type": "string"
        }
      }
    },
    "articleBetsSchema": {
      "required": [
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 32
        },
        "subtext": {
          "type": "string",
          "minLength": 1,
          "maxLength": 64
        },
        "result": {
          "type": "string"
        },
        "timePosted": {
          "type": "string"
        },
        "forUsers": {
          "type": "array",
          "items": {
            "properties": {
              "user_name": {
                "type": "string"
              },
              "betAmount": {
                "type": "number"
              }
            }
          }
        },
        "againstUsers": {
          "type": "array",
          "items": {
            "properties": {
              "user_name": {
                "type": "string"
              },
              "betAmount": {
                "type": "number"
              }
            }
          }
        },
        "ends": {
          "type": "string"
        }
      }
    },
    "testBetsFinishedSchema": {
      "description": "Main schema for completed bets",
      "required": [
        "userName",
        "title"
      ],
      "properties": {
        "userName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "side": {
          "type": "string"
        },
        "deadline": {
          "type": "string"
        },
        "forUsers": {
          "type": "array",
          "items": {
            "properties": {
              "user_name": {
                "type": "string"
              },
              "betAmount": {
                "type": "number"
              }
            }
          }
        },
        "againstUsers": {
          "type": "array",
          "items": {
            "properties": {
              "user_name": {
                "type": "string"
              },
              "betAmount": {
                "type": "number"
              }
            }
          }
        },
        "commonBets": {
          "type": "array",
          "items": {
            "properties": {
              "user_name": {
                "type": "string"
              },
              "betAmount": {
                "type": "string"
              },
              "bet": {
                "type": "number"
              }
            }
          }
        },
        "firstPlaceCut": {
          "type": "number"
        },
        "tester": {
          "type": "string"
        },
        "secondPlaceCut": {
          "type": "number"
        },
        "thirdPlaceCut": {
          "type": "number"
        },
        "forTotal": {
          "type": "number"
        },
        "againstTotal": {
          "type": "number"
        },
        "commonTotal": {
          "type": "number"
        },
        "winners": {
          "type": "array",
          "properties": {
            "user_name": {
              "type": "string"
            },
            "payout": {
              "type": "number"
            },
            "profilePicture": {
              "type": "string"
            }
          }
        },
        "losers": {
          "type": "array",
          "properties": {
            "user_name": {
              "type": "string"
            }
          }
        },
        "result": {
          "type": "number"
        }
      }
    },
    "testBetSchema": {
      "description": "Main schema for general bets",
      "required": [
        "user_name",
        "title"
      ],
      "properties": {
        "user_name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "side": {
          "type": "string"
        },
        "deadline": {
          "type": "string"
        },
        "forUsers": {
          "type": "array",
          "properties": {
            "user_name": {
              "type": "string"
            },
            "betAmount": {
              "type": "number"
            }
          }
        },
        "againstUsers": {
          "type": "array",
          "properties": {
            "user_name": {
              "type": "string"
            },
            "betAmount": {
              "type": "number"
            }
          }
        },
        "commonBets": {
          "type": "array",
          "properties": {
            "user_name": {
              "type": "string"
            },
            "betAmount": {
              "type": "number"
            },
            "bet": {
              "type": "number"
            },
            "firstPlaceCut": {
              "type": "number"
            },
            "secondPlaceCut": {
              "type": "number"
            },
            "thirdPlaceCut": {
              "type": "number"
            }
          }
        }
      }
    },
    "rest_API_Response": {
      "description": "Format used to send response messages from server to client",
      "properties": {
        "status": {
          "type": "string",
          "example": "error"
        },
        "body": {
          "type": "string",
          "example": "Invalid input"
        }
      }
    }
  }
}